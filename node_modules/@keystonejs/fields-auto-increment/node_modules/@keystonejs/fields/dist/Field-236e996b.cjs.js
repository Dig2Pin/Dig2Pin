'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var Select = _interopDefault(require('@arch-ui/select'));

const SelectField = ({
  onChange,
  autoFocus,
  field,
  value: serverValue,
  renderContext,
  errors
}) => {
  const handleChange = option => {
    onChange(option ? option.value : null);
  };

  const value = field.options.find(i => i.value === serverValue);
  const htmlID = `ks-input-${field.path}`;
  const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
  const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
  const selectProps = renderContext === 'dialog' ? {
    menuPortalTarget: document.body,
    menuShouldBlockScroll: true
  } : null;
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, core.jsx("div", {
    css: {
      flex: 1
    }
  }, core.jsx(Select, _extends({
    autoFocus: autoFocus,
    value: canRead ? value : undefined,
    placeholder: canRead ? undefined : error.message,
    options: field.options,
    onChange: handleChange,
    isClearable: true,
    id: `react-select-${htmlID}`,
    inputId: htmlID,
    instanceId: htmlID
  }, selectProps)))));
};

exports.default = SelectField;
