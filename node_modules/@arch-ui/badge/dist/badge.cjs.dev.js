'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var styled = _interopDefault(require('@emotion/styled'));
var theme = require('@arch-ui/theme');

const boldBackgroundColor = {
  default: theme.colors.N60,
  inverted: theme.colors.text,
  primary: theme.colors.primary,
  created: theme.colors.create,
  warning: theme.colors.warning,
  danger: theme.colors.danger
};
const boldTextColor = {
  default: 'white',
  inverted: 'white',
  primary: 'white',
  created: 'white',
  warning: 'white',
  danger: 'white'
};
const subtleBackgroundColor = {
  default: theme.colors.N10,
  inverted: 'white',
  primary: theme.colors.B.L85,
  created: theme.colors.G.L85,
  warning: theme.colors.Y.L85,
  danger: theme.colors.R.L85
};
const subtleTextColor = {
  default: theme.colors.N70,
  inverted: theme.colors.text,
  primary: theme.colors.B.D20,
  created: theme.colors.G.D20,
  warning: theme.colors.Y.D20,
  danger: theme.colors.R.D20
};
const BadgeElement = styled.div(({
  appearance,
  variant
}) => ({
  backgroundColor: variant === 'bold' ? boldBackgroundColor[appearance] : subtleBackgroundColor[appearance],
  borderRadius: '2em',
  boxSizing: 'border-box',
  color: variant === 'bold' ? boldTextColor[appearance] : subtleTextColor[appearance],
  display: 'inline-block',
  fontSize: 12,
  fontWeight: 500,
  lineHeight: 1,
  minWidth: '2em',
  padding: '0.25em 0.5em',
  textAlign: 'center'
}));
const Badge = React.memo((_ref) => {
  let {
    appearance = 'default',
    max = 99,
    value = 0,
    variant = 'subtle'
  } = _ref,
      props = _objectWithoutProperties(_ref, ["appearance", "max", "value", "variant"]);

  const getValue = ({
    value,
    max
  }) => {
    if (value < 0) return '0';
    if (max > 0 && value > max) return "".concat(max, "+");
    return value;
  };

  return React__default.createElement(BadgeElement, _extends({
    appearance: appearance,
    variant: variant
  }, props), getValue({
    value,
    max
  }));
});

exports.Badge = Badge;
