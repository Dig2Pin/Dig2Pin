'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var core = require('@emotion/core');

var React = require('react');

var React__default = _interopDefault(React);

var filters = require('@arch-ui/filters');

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var Select = _interopDefault(require('@arch-ui/select'));

var options = require('@arch-ui/options');

var theme = require('@arch-ui/theme');

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

const EventCatcher = props => core.jsx("div", _extends({
  onClick: e => {
    e.preventDefault();
    e.stopPropagation();
  }
}, props));

const SelectWrapper = props => core.jsx("div", _extends({
  css: {
    marginTop: theme.gridSize * 2
  }
}, props));

const SelectFilterView = ({
  innerRef,
  field,
  value,
  onChange
}) => {
  const handleRadioChange = newValue => {
    const inverted = newValue === 'does_match' ? false : true;
    onChange(_objectSpread(_objectSpread({}, value), {}, {
      inverted
    }));
  };

  const handleSelectChange = newValue => {
    if (newValue.length) {
      const options = [...newValue]; // ensure consistent data shape

      onChange(_objectSpread(_objectSpread({}, value), {}, {
        options
      }));
    }
  };

  const radioValue = value.inverted ? 'does_not_match' : 'does_match';
  const selectProps = {
    innerRef: innerRef,
    onChange: handleSelectChange,
    options: field.options,
    placeholder: 'Select...',
    value: value.options,
    isMulti: true
  };
  return core.jsx(React.Fragment, null, core.jsx(filters.RadioGroup, {
    onChange: handleRadioChange,
    value: radioValue
  }, core.jsx(filters.Radio, {
    value: "does_match"
  }, "Matches"), core.jsx(filters.Radio, {
    value: "does_not_match"
  }, "Does not match")), core.jsx(SelectWrapper, null, field.options.length > 8 ? core.jsx(EventCatcher, null, core.jsx(Select, _extends({
    menuPortalTarget: document.body
  }, selectProps, {
    components: {
      Option: CheckMarkOptionSelect
    }
  }))) : core.jsx(options.Options, _extends({
    displaySearch: false
  }, selectProps, {
    components: {
      Option: CheckMarkOption
    }
  }))));
};

const CheckMarkOption = _ref => {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children"]);

  return core.jsx(options.OptionPrimitive, props, core.jsx("span", null, children), core.jsx(options.CheckMark, {
    isFocused: props.isFocused,
    isSelected: props.isSelected
  }));
}; // TODO: figure out a better way to give options padding in the the dropdown


const CheckMarkOptionSelect = props => core.jsx(CheckMarkOption, _extends({}, props, {
  css: {
    paddingLeft: `${theme.gridSize}px`,
    paddingRight: `${theme.gridSize}px`
  }
}));

exports.default = SelectFilterView;
