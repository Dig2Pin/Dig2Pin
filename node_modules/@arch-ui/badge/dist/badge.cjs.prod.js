"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), React = require("react"), React__default = _interopDefault(React), styled = _interopDefault(require("@emotion/styled")), theme = require("@arch-ui/theme");

const boldBackgroundColor = {
  default: theme.colors.N60,
  inverted: theme.colors.text,
  primary: theme.colors.primary,
  created: theme.colors.create,
  warning: theme.colors.warning,
  danger: theme.colors.danger
}, boldTextColor = {
  default: "white",
  inverted: "white",
  primary: "white",
  created: "white",
  warning: "white",
  danger: "white"
}, subtleBackgroundColor = {
  default: theme.colors.N10,
  inverted: "white",
  primary: theme.colors.B.L85,
  created: theme.colors.G.L85,
  warning: theme.colors.Y.L85,
  danger: theme.colors.R.L85
}, subtleTextColor = {
  default: theme.colors.N70,
  inverted: theme.colors.text,
  primary: theme.colors.B.D20,
  created: theme.colors.G.D20,
  warning: theme.colors.Y.D20,
  danger: theme.colors.R.D20
}, BadgeElement = styled.div(({appearance: appearance, variant: variant}) => ({
  backgroundColor: "bold" === variant ? boldBackgroundColor[appearance] : subtleBackgroundColor[appearance],
  borderRadius: "2em",
  boxSizing: "border-box",
  color: "bold" === variant ? boldTextColor[appearance] : subtleTextColor[appearance],
  display: "inline-block",
  fontSize: 12,
  fontWeight: 500,
  lineHeight: 1,
  minWidth: "2em",
  padding: "0.25em 0.5em",
  textAlign: "center"
})), Badge = React.memo(_ref => {
  let {appearance: appearance = "default", max: max = 99, value: value = 0, variant: variant = "subtle"} = _ref, props = _objectWithoutProperties(_ref, [ "appearance", "max", "value", "variant" ]);
  return React__default.createElement(BadgeElement, _extends({
    appearance: appearance,
    variant: variant
  }, props), (({value: value, max: max}) => value < 0 ? "0" : max > 0 && value > max ? "".concat(max, "+") : value)({
    value: value,
    max: max
  }));
});

exports.Badge = Badge;
