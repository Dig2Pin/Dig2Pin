'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

require("@babel/runtime/helpers/classCallCheck");

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class CheckboxController extends fields.default {
  constructor(_ref, ...args) {
    let {
      defaultValue = false
    } = _ref,
        config = _objectWithoutProperties(_ref, ["defaultValue"]);

    super(_objectSpread(_objectSpread({}, config), {}, {
      defaultValue
    }), ...args);

    _defineProperty(this, "serialize", data => data[this.path]);

    _defineProperty(this, "deserialize", data => data[this.path]);

    _defineProperty(this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      const key = type === 'is' ? `${this.path}` : `${this.path}_${type}`;
      return `${key}: ${value}`;
    });

    _defineProperty(this, "getFilterLabel", ({
      label
    }) => {
      return `${this.label} ${label.toLowerCase()}`;
    });

    _defineProperty(this, "formatFilter", ({
      label,
      value
    }) => {
      return `${this.getFilterLabel({
        label
      })}: "${value}"`;
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is',
      getInitialValue: () => 'true'
    }, {
      type: 'not',
      label: 'Is not',
      getInitialValue: () => 'true'
    }]);
  }

}

exports.default = CheckboxController;
