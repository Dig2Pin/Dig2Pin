'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var theme = require('@arch-ui/theme');

var input = require('@arch-ui/input');

var preview = require('./preview-62bebcd0.cjs.js');

const StyledPreview = _ref => {
  let {
    preview: preview$1,
    originalUrl,
    fieldPath
  } = _ref,
      props = _objectWithoutProperties(_ref, ["preview", "originalUrl", "fieldPath"]);

  return core.jsx(preview.Preview, _extends({
    data: preview$1,
    originalUrl: originalUrl,
    fieldPath: fieldPath,
    css: {
      backgroundColor: 'white',
      borderRadius: theme.borderRadius,
      border: `1px solid ${theme.colors.N20}`,
      marginTop: theme.gridSize,
      padding: 4,
      width: 410,
      // 300px image + chrome
      boxSizing: 'border-box'
    }
  }, props));
};

const PlaceholderPreview = ({
  originalUrl,
  fieldPath
}) => core.jsx(StyledPreview, {
  data: {
    html: '<div style="background-color: darkgray; height: 2.5em" />',
    title: 'Preview will be generated after save'
  },
  originalUrl: originalUrl,
  fieldPath: fieldPath,
  css: {
    opacity: 0.3
  }
});

const OEmbedField = ({
  onChange,
  autoFocus,
  field,
  value = null,
  savedValue = null,
  errors
}) => {
  const handleChange = event => {
    onChange({
      originalUrl: event.target.value
    });
  };

  const htmlID = `ks-oembed-${field.path}`;
  const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
  const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
  const hasChanged = field.hasChanged({
    [field.path]: savedValue
  }, {
    [field.path]: value
  });
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, core.jsx(input.Input, {
    autoComplete: "off",
    autoFocus: autoFocus,
    type: "url",
    value: canRead && value && value.originalUrl || '',
    placeholder: canRead ? undefined : error.message,
    onChange: handleChange,
    id: htmlID
  })), value && value.originalUrl && hasChanged && core.jsx(PlaceholderPreview, {
    originalUrl: value.originalUrl,
    fieldPath: field.path
  }), value && value.originalUrl && !hasChanged && core.jsx(StyledPreview, {
    preview: value.preview,
    originalUrl: value.originalUrl,
    fieldPath: field.path
  }));
};

exports.default = OEmbedField;
