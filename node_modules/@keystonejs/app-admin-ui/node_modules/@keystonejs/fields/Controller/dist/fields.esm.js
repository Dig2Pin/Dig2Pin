import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import isEqual from 'lodash.isequal';

var FieldController = function FieldController(_ref, _ref2, views) {
  var _this = this;

  var readViews = _ref2.readViews,
      preloadViews = _ref2.preloadViews,
      getListByKey = _ref2.getListByKey,
      adminPath = _ref2.adminPath,
      authStrategy = _ref2.authStrategy;

  var label = _ref.label,
      path = _ref.path,
      type = _ref.type,
      access = _ref.access,
      isOrderable = _ref.isOrderable,
      isPrimaryKey = _ref.isPrimaryKey,
      isRequired = _ref.isRequired,
      adminDoc = _ref.adminDoc,
      defaultValue = _ref.defaultValue,
      config = _objectWithoutProperties(_ref, ["label", "path", "type", "access", "isOrderable", "isPrimaryKey", "isRequired", "adminDoc", "defaultValue"]);

  _classCallCheck(this, FieldController);

  _defineProperty(this, "getQueryFragment", function () {
    return _this.path;
  });

  _defineProperty(this, "serialize", function (data) {
    return data[_this.path] || null;
  });

  _defineProperty(this, "validateInput", function () {});

  _defineProperty(this, "deserialize", function (data) {
    return data[_this.path];
  });

  _defineProperty(this, "hasChanged", function (initialData, currentData) {
    return !isEqual(initialData[_this.path], currentData[_this.path]);
  });

  _defineProperty(this, "getDefaultValue", function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$originalInput = _ref3.originalInput,
        originalInput = _ref3$originalInput === void 0 ? {} : _ref3$originalInput,
        _ref3$prefill = _ref3.prefill,
        prefill = _ref3$prefill === void 0 ? {} : _ref3$prefill;

    return _this._getDefaultValue({
      originalInput: originalInput,
      prefill: prefill
    });
  });

  _defineProperty(this, "initCellView", function () {
    var Cell = _this.views.Cell;

    if (!Cell) {
      return;
    }

    _this.readViews([Cell]);
  });

  _defineProperty(this, "initFieldView", function () {
    var Field = _this.views.Field;

    if (!Field) {
      return;
    }

    _this.readViews([Field]);
  });

  _defineProperty(this, "initFilterView", function () {
    var Filter = _this.views.Filter;

    if (!Filter) {
      return;
    }

    _this.readViews([Filter]);
  });

  _defineProperty(this, "getFilterTypes", function () {
    return [];
  });

  _defineProperty(this, "getFilterValue", function (value) {
    return value;
  });

  this.config = config;
  this.label = label;
  this.path = path;
  this.type = type;
  this.maybeAccess = access;
  this.isOrderable = isOrderable;
  this.isPrimaryKey = isPrimaryKey;
  this.isRequired = isRequired;
  this.adminDoc = adminDoc;
  this.readViews = readViews;
  this.preloadViews = preloadViews;
  this.getListByKey = getListByKey;
  this.adminPath = adminPath;
  this.authStrategy = authStrategy;
  this.views = views;

  if (typeof defaultValue !== 'function') {
    // By default, the default value is undefined
    this._getDefaultValue = function (_ref4) {
      var prefill = _ref4.prefill;
      return prefill[_this.path] || defaultValue;
    };
  } else {
    this._getDefaultValue = defaultValue;
  }
} // TODO: This is a bad default; we should (somehow?) inspect the fields provided
// by the implementations gqlOutputFields
;

export default FieldController;
