'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/objectWithoutProperties");

require("@babel/runtime/helpers/classCallCheck");

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

var dateFns = require('date-fns');

class CalendarDayController extends fields.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      const key = type === 'is' ? `${this.path}` : `${this.path}_${type}`;
      return `${key}: "${value}"`;
    });

    _defineProperty(this, "getFilterLabel", ({
      label
    }) => {
      return `${this.label} ${label.toLowerCase()}`;
    });

    _defineProperty(this, "formatFilter", ({
      label,
      value
    }) => {
      return `${this.getFilterLabel({
        label
      })}: "${value}"`;
    });

    _defineProperty(this, "serialize", data => {
      const value = data[this.path];

      if (typeof value !== 'string') {
        return null;
      }

      return value.trim() || null;
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not',
      label: 'Is not exactly',
      getInitialValue: () => ''
    }, {
      type: 'gt',
      label: 'Is after',
      getInitialValue: () => ''
    }, {
      type: 'lt',
      label: 'Is before',
      getInitialValue: () => ''
    }, {
      type: 'gte',
      label: 'Is after or equal to',
      getInitialValue: () => ''
    }, {
      type: 'lte',
      label: 'Is before or equal to',
      getInitialValue: () => ''
    } // QUESTION: should we support "in" and "not_in" filters for DateTime?
    // What does the UI look like for that.
    ]);

    _defineProperty(this, "validateInput", ({
      resolvedData,
      addFieldValidationError
    }) => {
      const {
        yearRangeFrom,
        yearRangeTo
      } = this.config;
      const inputYear = dateFns.getYear(resolvedData[this.path]);
      const inRange = yearRangeFrom <= inputYear && inputYear <= yearRangeTo;

      if (!inRange) {
        return addFieldValidationError(`Input not within configured date interval.`);
      }
    });
  }

}

exports.default = CalendarDayController;
