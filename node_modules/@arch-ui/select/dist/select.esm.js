import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { createElement, useMemo } from 'react';
import BaseSelect from 'react-select';
import AsyncCreatableSelect from 'react-select/async-creatable';
import AsyncSelect from 'react-select/async';
import CreatableSelect from 'react-select/creatable';
import { colors } from '@arch-ui/theme';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// Styled Select
// ==============================

const indicatorStyles = (provided, {
  isDisabled,
  isFocused
}) => {
  let styles = {
    color: colors.N20,
    ':hover': !isDisabled && !isFocused ? {
      color: colors.N40
    } : null
  };
  if (isDisabled) styles = {
    color: colors.N10
  };

  if (isFocused) {
    styles = {
      color: colors.N60,
      ':hover': {
        color: colors.N80
      }
    };
  }

  return _objectSpread({}, provided, {}, styles);
};

const selectStyles = {
  control: (provided, {
    isFocused
  }) => {
    const focusStyles = isFocused ? {
      borderColor: colors.primary,
      boxShadow: "inset 0 1px 1px rgba(0, 0, 0, 0.075),\n      0 0 0 3px ".concat(colors.B.A20),
      outline: 0
    } : null;
    return _objectSpread({}, provided, {
      backgroundColor: 'white',
      borderColor: colors.N20,
      fontSize: '1rem',
      minHeight: 35,
      minWidth: '200px',
      ':hover': {
        borderColor: colors.N30
      }
    }, focusStyles);
  },
  clearIndicator: indicatorStyles,
  dropdownIndicator: indicatorStyles,
  menu: provided => _objectSpread({}, provided, {
    fontSize: '0.9em',
    zIndex: 10
  }),
  option: (provided, {
    isDisabled,
    isFocused,
    isSelected
  }) => {
    let bg = 'inherit';
    if (isFocused) bg = colors.B.L90;
    if (isSelected) bg = colors.primary;
    let txt = 'inherit';
    if (isFocused) txt = colors.primary;
    if (isSelected) txt = 'white';
    if (isDisabled) txt = colors.N40;
    const cssPseudoActive = !isSelected && !isDisabled ? {
      backgroundColor: colors.B.L80,
      color: colors.B.D20
    } : {};
    return _objectSpread({}, provided, {
      fontSize: '1rem',
      backgroundColor: bg,
      color: txt,
      ':active': cssPseudoActive
    });
  },
  menuPortal: provided => _objectSpread({}, provided, {
    zIndex: 3
  })
};

const getSelectVariant = ({
  isAsync,
  isCreatable
}) => {
  if (isAsync && isCreatable) {
    return AsyncCreatableSelect;
  }

  if (isAsync) {
    return AsyncSelect;
  }

  if (isCreatable) {
    return CreatableSelect;
  }

  return BaseSelect;
};

const Select = (_ref) => {
  let {
    isAsync,
    isCreatable,
    innerRef,
    styles
  } = _ref,
      props = _objectWithoutProperties(_ref, ["isAsync", "isCreatable", "innerRef", "styles"]);

  const ReactSelect = getSelectVariant({
    isAsync,
    isCreatable
  });
  return createElement(ReactSelect, _extends({
    ref: innerRef,
    styles: useMemo(() => _objectSpread({}, selectStyles, {}, styles), [styles])
  }, props));
};

export default Select;
