import { jsx } from '@emotion/core';
import { FieldContainer, FieldLabel, FieldDescription, FieldInput } from '@arch-ui/fields';
import { Alert } from '@arch-ui/alert';
import { useRef, useState, useEffect } from 'react';
import { LockIcon, EyeIcon } from '@arch-ui/icons';
import { Button } from '@arch-ui/button';
import { Input } from '@arch-ui/input';
import { FlexGroup } from '@arch-ui/layout';
import { A11yText } from '@arch-ui/typography';
/** @jsx jsx */

const PasswordField = ({
  onChange,
  autoFocus,
  field,
  item: {
    password_is_set
  } = {},
  errors,
  warnings
}) => {
  const focusTarget = useRef();
  const [isEditing, setIsEditing] = useState(false);
  const [showInputValue, setShowInputValue] = useState(false);
  const [inputPassword, setInputPassword] = useState('');
  const [inputConfirm, setInputConfirm] = useState('');
  useEffect(() => {
    if (isEditing) {
      onChange({
        inputPassword,
        inputConfirm
      });
    }
  }, [inputPassword, inputConfirm]);
  useEffect(() => {
    if (isEditing && focusTarget.current) {
      focusTarget.current.focus();
    }
  }, [isEditing]);

  const toggleInterface = () => {
    setIsEditing(!isEditing);
  };

  const toggleMode = () => {
    setShowInputValue(!showInputValue);
  };

  const renderErrors = src => {
    const appearance = src === errors ? 'danger' : 'warning';
    return src.map(({
      message,
      data
    }) => jsx(Alert, {
      appearance: appearance,
      key: message
    }, message, data ? ` - ${JSON.stringify(data)}` : null));
  };

  const htmlID = `ks-input-${field.path}`;
  return jsx(FieldContainer, null, jsx(FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), jsx(FieldDescription, {
    text: field.adminDoc
  }), jsx(FieldInput, null, isEditing ? jsx(FlexGroup, {
    growIndexes: [0, 1]
  }, jsx(Input, {
    autoComplete: "off",
    autoFocus: autoFocus,
    id: htmlID,
    ref: focusTarget,
    name: "inputPassword",
    onChange: e => setInputPassword(e.target.value),
    placeholder: "New Password",
    type: showInputValue ? 'text' : 'password',
    value: inputPassword
  }), jsx(Input, {
    autoComplete: "off",
    autoFocus: autoFocus,
    id: `${htmlID}-confirm`,
    name: "inputConfirm",
    onChange: e => setInputConfirm(e.target.value),
    placeholder: "Confirm Password",
    type: showInputValue ? 'text' : 'password',
    value: inputConfirm
  }), jsx(Button, {
    isActive: showInputValue,
    onClick: toggleMode,
    title: showInputValue ? 'Hide Text' : 'Show Text',
    variant: "ghost"
  }, jsx(A11yText, null, showInputValue ? 'Hide Text' : 'Show Text'), jsx("div", {
    css: {
      width: 20
    }
  }, showInputValue ? jsx(LockIcon, null) : jsx(EyeIcon, null)))) : jsx(Button, {
    id: `${htmlID}-button`,
    onClick: toggleInterface,
    variant: "ghost"
  }, password_is_set ? 'Update Password' : 'Set Password')), renderErrors(errors), renderErrors(warnings));
};

export default PasswordField;
