'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var core = require('@emotion/core');

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var React = require('react');

var React__default = _interopDefault(React);

var reactPopper = require('react-popper');

var index = require('./index-eb1bb328.cjs.js');

const PopperRender = React.forwardRef(({
  update,
  alignment,
  isFocused,
  style,
  onAlignmentChange
}, ref) => {
  React.useLayoutEffect(update, [alignment]);
  return core.jsx("div", {
    ref: ref,
    css: {
      display: isFocused ? 'block' : 'none',
      backgroundColor: 'black',
      padding: 8
    },
    style: style
  }, ['left', 'center', 'right'].map(align => {
    return core.jsx("button", {
      type: "button",
      key: align,
      onMouseDown: event => {
        // so that the image block doesn't get deselected
        event.preventDefault();
      },
      onClick: () => {
        onAlignmentChange(align);
      }
    }, align);
  }));
});
const popperModifiers = [{
  name: 'flip',
  enabled: false
}, {
  name: 'hide',
  enabled: false
}, {
  name: 'preventOverflow',
  enabled: false
}];

const Image = _ref => {
  let {
    alignment,
    attributes,
    isFocused,
    src,
    onAlignmentChange
  } = _ref,
      props = _objectWithoutProperties(_ref, ["alignment", "attributes", "isFocused", "src", "onAlignmentChange"]);

  const [referenceElement, setReferenceElement] = index.useStateWithEqualityCheck(null);
  const [popperElement, setPopperElement] = React.useState(null);
  const {
    styles,
    update
  } = reactPopper.usePopper(referenceElement, popperElement, {
    placement: 'top',
    modifiers: popperModifiers
  });
  return core.jsx("div", null, core.jsx("img", _extends({}, props, attributes, {
    src: src,
    ref: setReferenceElement,
    css: {
      width: '100%',
      outline: isFocused ? 'auto' : null
    }
  })), core.jsx(PopperRender, {
    update,
    alignment,
    ref: setPopperElement,
    isFocused,
    style: styles.popper,
    onAlignmentChange
  }));
};
/** @jsx jsx */


let type = 'image';
let ImageAlignmentContext = React.createContext({
  aligment: '',

  onAlignmentChange() {}

});

function Node(props) {
  let {
    data
  } = props.node;
  let {
    aligment,
    onAlignmentChange
  } = React.useContext(ImageAlignmentContext);
  return core.jsx(Image, {
    alignment: aligment,
    attributes: props.attributes,
    isFocused: props.isFocused,
    src: data.get('src'),
    onAlignmentChange: onAlignmentChange
  });
}

let getSchema = () => ({
  isVoid: true
});

exports.ImageAlignmentContext = ImageAlignmentContext;
exports.Node = Node;
exports.getSchema = getSchema;
exports.type = type;
