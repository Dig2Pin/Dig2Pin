'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/objectWithoutProperties");

require("@babel/runtime/helpers/classCallCheck");

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

class TextController extends fields.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      const key = type === 'is_i' ? `${this.path}_i` : `${this.path}_${type}`;
      return `${key}: "${value}"`;
    });

    _defineProperty(this, "getFilterLabel", ({
      label
    }) => {
      return `${this.label} ${label.toLowerCase()}`;
    });

    _defineProperty(this, "formatFilter", ({
      label,
      value
    }) => {
      return `${this.getFilterLabel({
        label
      })}: "${value}"`;
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'contains_i',
      label: 'Contains',
      getInitialValue: () => ''
    }, {
      type: 'not_contains_i',
      label: 'Does not contain',
      getInitialValue: () => ''
    }, {
      type: 'is_i',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not_i',
      label: 'Is not exactly',
      getInitialValue: () => ''
    }, {
      type: 'starts_with_i',
      label: 'Starts with',
      getInitialValue: () => ''
    }, {
      type: 'not_starts_with_i',
      label: 'Does not start with',
      getInitialValue: () => ''
    }, {
      type: 'ends_with_i',
      label: 'Ends with',
      getInitialValue: () => ''
    }, {
      type: 'not_ends_with_i',
      label: 'Does not end with',
      getInitialValue: () => ''
    }]);
  }

}

exports.default = TextController;
