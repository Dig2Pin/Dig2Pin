import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import { forwardRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { borderRadius, shadows, gridSize, colors } from '@arch-ui/theme';
import FocusTrap from 'focus-trap-react';
import { withModalHandlers, springDown } from '@arch-ui/modal-utils';
import { usePopper } from 'react-popper';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
const ARROW_WIDTH = 30;
const Wrapper = forwardRef((_ref, ref) => {
  let {
    left,
    top,
    width
  } = _ref,
      props = _objectWithoutProperties(_ref, ["left", "top", "width"]);

  return jsx("div", _extends({
    ref: ref,
    css: {
      backgroundColor: 'white',
      borderRadius: borderRadius * 2,
      boxShadow: shadows[2],
      marginTop: gridSize * 2,
      maxHeight: '100%',
      zIndex: 200,
      width
    }
  }, props));
});
const WrapperInner = forwardRef((props, ref) => jsx("div", _extends({
  ref: ref,
  css: {
    position: 'relative'
  }
}, props)));
const Arrow = forwardRef(({
  style
}, ref) => jsx("div", {
  ref: ref,
  css: {
    height: ARROW_WIDTH,
    marginTop: '-11px',
    position: 'absolute',
    width: ARROW_WIDTH
  },
  style: style
}, jsx("svg", {
  viewBox: "0 0 30 30",
  style: {
    transform: 'rotate(90deg)'
  },
  focusable: "false",
  role: "presentation"
}, jsx("path", {
  css: {
    fill: colors.text,
    fillOpacity: 0.1
  },
  d: "M8.11 6.302c1.015-.936 1.887-2.922 1.887-4.297v26c0-1.378-.868-3.357-1.888-4.297L.925 17.09c-1.237-1.14-1.233-3.034 0-4.17L8.11 6.302z"
}), jsx("path", {
  css: {
    fill: 'white'
  },
  d: "M8.787 7.036c1.22-1.125 2.21-3.376 2.21-5.03V0v30-2.005c0-1.654-.983-3.9-2.21-5.03l-7.183-6.616c-.81-.746-.802-1.96 0-2.7l7.183-6.614z"
}))));

const Popout = ({
  children,
  targetNode,
  contentNode,
  getModalRef,
  style,
  width = 320
}) => {
  const [arrowElement, setArrowElement] = useState(null);
  const {
    styles
  } = usePopper(targetNode, contentNode, {
    placement: 'bottom',
    modifiers: [{
      name: 'arrow',
      options: {
        element: arrowElement
      }
    }]
  });
  const attachTo = typeof document !== 'undefined' ? document.body : null;
  return attachTo ? createPortal(jsx("div", {
    ref: getModalRef,
    style: _objectSpread(_objectSpread({}, styles.popper), {}, {
      zIndex: 2
    })
  }, jsx(Wrapper, {
    width: width,
    style: style // style comes from Transition

  }, jsx(FocusTrap, {
    focusTrapOptions: {
      clickOutsideDeactivates: true
    }
  }, jsx(WrapperInner, null, jsx(Arrow, {
    ref: setArrowElement,
    style: styles.arrow
  }), children)))), attachTo) : null;
};

var index = withModalHandlers(Popout, {
  transition: springDown
});

export default index;
