import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import '@babel/runtime/helpers/esm/classCallCheck';
import 'lodash.isequal';
import FieldController from '../Controller/dist/fields.esm.js';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class SelectController extends FieldController {
  constructor(_ref, ...args) {
    let {
      defaultValue = null
    } = _ref,
        config = _objectWithoutProperties(_ref, ["defaultValue"]);

    super(_objectSpread(_objectSpread({}, config), {}, {
      defaultValue
    }), ...args);

    _defineProperty(this, "getFilterGraphQL", ({
      value: {
        inverted,
        options
      }
    }) => {
      if (!options.length) {
        return '';
      }

      const isMulti = options.length > 1;
      let key = this.path;

      if (isMulti && inverted) {
        key = `${this.path}_not_in`;
      } else if (isMulti) {
        key = `${this.path}_in`;
      } else if (inverted) {
        key = `${this.path}_not`;
      }

      const value = isMulti ? `[${options.map(x => x.value).join(',')}]` : options[0].value;
      return this.dataType === 'string' ? `${key}: "${value}"` : `${key}: ${value}`;
    });

    _defineProperty(this, "getFilterLabel", () =>
    /*{ value }*/
    {
      return this.label;
    });

    _defineProperty(this, "formatFilter", ({
      value
    }) => {
      if (!value.options.length) {
        return value.inverted ? `${this.label} is set` : `${this.label} has no value`;
      }

      if (value.options.length > 1) {
        const values = value.options.map(i => i.label).join(', ');
        return value.inverted ? `${this.label} is not in [${values}]` : `${this.label} is in [${values}]`;
      }

      const optionLabel = value.options[0].label;
      return value.inverted ? `${this.label} is not ${optionLabel}` : `${this.label} is ${optionLabel}`;
    });

    _defineProperty(this, "getFilterValue", value => {
      return value && value.options && value.options.length ? value : null;
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Matches',
      getInitialValue: () => ({
        inverted: false,
        options: []
      })
    }]);

    this.options = config.options;
    this.dataType = config.dataType;
  }

}

export default SelectController;
