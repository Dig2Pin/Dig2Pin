'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var fields = require('@keystonejs/fields');

var adapterKnex = require('@keystonejs/adapter-knex');

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class AutoIncrementImplementation extends fields.Implementation {
  constructor(path, _ref = {}, context = {}) {
    let {
      gqlType,
      isUnique = true,
      access = {}
    } = _ref,
        config = _objectWithoutProperties(_ref, ["gqlType", "isUnique", "access"]); // Apply some field type defaults before we hand off to super; see README.md


    if (typeof access === 'object') {
      access = _objectSpread({
        create: false,
        update: false,
        delete: false
      }, access);
    } // The base implementation takes care of everything else


    super(path, _objectSpread(_objectSpread({}, config), {}, {
      isUnique,
      access
    }), context); // If no valid gqlType is supplied, default based on whether or not we're the primary key

    this.gqlType = ['ID', 'Int'].includes(gqlType) ? gqlType : this.isPrimaryKey ? 'ID' : 'Int';
  }

  gqlOutputFields() {
    return [`${this.path}: ${this.gqlType}`];
  }

  gqlOutputFieldResolvers() {
    return {
      [`${this.path}`]: item => item[this.path]
    };
  }

  gqlQueryInputFields() {
    return [...this.equalityInputFields(this.gqlType), ...this.orderingInputFields(this.gqlType), ...this.inInputFields(this.gqlType)];
  }

  get gqlUpdateInputFields() {
    return [`${this.path}: ${this.gqlType}`];
  }

  get gqlCreateInputFields() {
    return [`${this.path}: ${this.gqlType}`];
  }

}

class KnexAutoIncrementInterface extends adapterKnex.KnexFieldAdapter {
  constructor() {
    super(...arguments); // Default isUnique to true if not specified

    this.isUnique = typeof this.config.isUnique === 'undefined' ? true : !!this.config.isUnique;
    this.isIndexed = !!this.config.isIndexed && !this.config.isUnique;
  } // Override isNotNullable defaulting logic; default to true if not specified


  get isNotNullable() {
    if (this._isNotNullable) return this._isNotNullable;
    return this._isNotNullable = !!(typeof this.knexOptions.isNotNullable === 'undefined' ? true : this.knexOptions.isNotNullable);
  }

  addToTableSchema(table) {
    // The knex `increments()` schema building function always uses the column as the primary key
    // If not isPrimaryKey use a raw `serial` instead
    // This will only work on PostgreSQL; see README.md
    if (this.field.isPrimaryKey) {
      // Fair to say primary keys are always non-nullable and uniqueness is implied by primary()
      table.increments(this.path).notNullable(); // TODO: Warning on invalid primary key config options?
    } else {
      const column = table.specificType(this.path, 'serial');
      if (this.isUnique) column.unique();else if (this.isIndexed) column.index();
      if (this.isNotNullable) column.notNullable();
    }
  }

  addToForeignTableSchema(table, {
    path,
    isUnique,
    isIndexed,
    isNotNullable
  }) {
    if (!this.field.isPrimaryKey) {
      throw `Can't create foreign key '${path}' on table "${table._tableName}"; ` + `'${this.path}' on list '${this.field.listKey}' as is not the primary key.`;
    }

    const column = table.integer(path).unsigned();
    if (isUnique) column.unique();else if (isIndexed) column.index();
    if (isNotNullable) column.notNullable();
  }

  getQueryConditions(dbPath) {
    return _objectSpread(_objectSpread(_objectSpread({}, this.equalityConditions(dbPath)), this.orderingConditions(dbPath)), this.inConditions(dbPath));
  }

}

const AutoIncrement = {
  type: 'AutoIncrement',
  implementation: AutoIncrementImplementation,
  views: {
    Controller: fields.Integer.views.Controller,
    Field: fields.Integer.views.Field,
    Filter: fields.Integer.views.Filter
  },
  adapters: {
    knex: KnexAutoIncrementInterface
  },
  primaryKeyDefaults: {
    knex: {
      // Uniqueness, non-nullability and GraphQL type are implied
      getConfig: () => ({
        type: AutoIncrement
      })
    }
  }
};
exports.AutoIncrement = AutoIncrement;
