'use strict';

var core = require('@emotion/core');

var fields = require('@arch-ui/fields');

require('react');

var theme = require('@arch-ui/theme');

var icons = require('@arch-ui/icons');

var prettyData = require('./prettyData-4558da34.cjs.js');
/** @jsx jsx */


const FieldLabel = props => {
  const accessError = (props.errors || []).find(error => error instanceof Error && error.name === 'AccessDeniedError');
  return core.jsx("span", {
    css: {
      color: theme.colors.N60,
      fontSize: '0.9rem',
      fontWeight: 500,
      paddingBottom: theme.gridSize,
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    htmlFor: props.htmlFor
  }, props.field.label, accessError ? core.jsx(icons.ShieldIcon, {
    title: accessError.message,
    css: {
      color: theme.colors.N20,
      marginRight: '1em'
    }
  }) : null);
};

const VirtualField = ({
  field,
  errors,
  value: serverValue
}) => {
  const value = typeof serverValue !== 'undefined' ? serverValue : '';
  const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
  return core.jsx(fields.FieldContainer, null, core.jsx(FieldLabel, {
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(prettyData.PrettyData, {
    data: canRead ? value : undefined
  }));
};

exports.FieldLabel = FieldLabel;
exports.default = VirtualField;
