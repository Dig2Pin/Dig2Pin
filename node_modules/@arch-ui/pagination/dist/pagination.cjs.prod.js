"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), core = require("@emotion/core"), react = require("react"), icons = require("@arch-ui/icons"), layout = require("@arch-ui/layout"), loading = require("@arch-ui/loading"), button = require("@arch-ui/button"), theme = require("@arch-ui/theme");

const Page = props => {
  const {onClick: onClick, value: value, isSelected: isSelected} = props;
  return core.jsx(button.Button, _extends({}, props, {
    onClick: () => {
      onClick && onClick(value);
    },
    css: isSelected ? {
      backgroundColor: theme.colors.primary,
      color: "white"
    } : {}
  }));
};

function ariaPageLabelFn(page) {
  return `Go to page ${page}`;
}

const PageChildren = ({page: page, isLoading: isLoading, isSelected: isSelected}) => {
  const [shouldShowLoading, setShouldShowLoading] = react.useState(!1);
  return react.useEffect(() => {
    if (isLoading && isSelected) {
      const id = setTimeout(() => {
        setShouldShowLoading(!0);
      }, 200);
      return () => {
        clearTimeout(id), setShouldShowLoading(!1);
      };
    }
  }, [ page, isLoading, isSelected ]), shouldShowLoading ? core.jsx("div", {
    css: {
      height: 19
    }
  }, core.jsx(loading.LoadingSpinner, null)) : core.jsx("span", null, page);
}, Pagination = _ref => {
  let {ariaPageLabel: ariaPageLabel = ariaPageLabelFn, currentPage: currentPage = 1, limit: limit = 5, pageSize: pageSize, total: total, isLoading: isLoading, onChange: onChange} = _ref, props = _objectWithoutProperties(_ref, [ "ariaPageLabel", "currentPage", "limit", "pageSize", "total", "isLoading", "onChange" ]);
  const [allPagesVisible, setAllPagesVisible] = react.useState(!1), toggleAllPages = () => {
    setAllPagesVisible(wereAllPagesVisible => !wereAllPagesVisible);
  };
  return core.jsx(layout.FlexGroup, _extends({
    as: "nav",
    align: "center",
    "aria-label": "Pagination",
    isContiguous: !0,
    isInline: !0
  }, props), (() => {
    if (total <= pageSize) return [];
    let pages = [], totalPages = Math.ceil(total / pageSize), minPage = 1, maxPage = totalPages;
    const moreCharacter = core.jsx("span", null, "â€¦");
    if (limit && limit < totalPages) {
      let rightLimit = Math.floor(limit / 2);
      maxPage = currentPage + rightLimit, (minPage = currentPage - (rightLimit + limit % 2 - 1)) < 1 && (maxPage = limit, 
      minPage = 1), maxPage > totalPages && (minPage = totalPages - limit + 1, maxPage = totalPages);
    }
    const handleChange = page => {
      onChange && (setAllPagesVisible(!1), onChange(page, {
        pageSize: pageSize,
        total: total,
        minPage: minPage,
        maxPage: maxPage
      }));
    };
    minPage > 1 && pages.push(core.jsx(Page, {
      "aria-label": ariaPageLabel(1),
      key: "page_start",
      onClick: handleChange,
      value: 1
    }, moreCharacter));
    for (let page = minPage; page <= maxPage; page++) {
      const isSelected = page === currentPage;
      pages.push(core.jsx(Page, {
        "aria-label": ariaPageLabel(page),
        "aria-current": isSelected ? "page" : null,
        key: `page_${page}`,
        isSelected: isSelected,
        onClick: handleChange,
        value: page
      }, core.jsx(PageChildren, {
        isLoading: isLoading,
        page: page,
        isSelected: isSelected
      })));
    }
    return maxPage < totalPages && pages.push(core.jsx(Page, {
      "aria-label": ariaPageLabel(totalPages),
      key: "page_end",
      onClick: handleChange,
      value: totalPages
    }, moreCharacter)), [ core.jsx(Page, {
      "aria-label": "Go to previous page",
      key: "page_prev",
      onClick: handleChange,
      value: currentPage - 1,
      isDisabled: 1 === currentPage
    }, core.jsx(icons.ChevronLeftIcon, null)), allPagesVisible ? pages : core.jsx(Page, {
      "aria-label": "Click to show all pages",
      key: "page_dot",
      onClick: toggleAllPages,
      id: "ks-pagination-show-pages",
      value: 1
    }, core.jsx(icons.ListOrderedIcon, null)), core.jsx(Page, {
      "aria-label": "Go to next page",
      key: "page_next",
      onClick: handleChange,
      value: currentPage + 1,
      isDisabled: currentPage === totalPages
    }, core.jsx(icons.ChevronRightIcon, null)) ];
  })());
};

exports.Pagination = Pagination;
